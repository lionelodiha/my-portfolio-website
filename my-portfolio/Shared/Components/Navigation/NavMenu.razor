@implements IAsyncDisposable

<nav class="nav-bar">
    <div class="nav-bar__container">
        <Brand BrandInfo="@_brand" />

        <div class="nav-bar__links">
            @foreach (NavigationLinkInfo item in _navigationLinks)
            {
                <NavLinkItem NavigationLinkInfo="item" ExternalLinkType="TargetUrlFormat.Plain" />
            }
        </div>

        <button type="button" class="nav-bar__toggle-btn nav-bar__toggle-btn--mask" title="Toggle menu"
            @onclick="ToggleSidebar" />
    </div>

    @if (_isSidebarOpen)
    {
        <SideMenu IsOpened="true" OnClose="ToggleSidebar" />
    }
</nav>

@code {
    [Inject] private PortfolioData AppContent { get; set; } = null!;
    [Inject] private ScrollLockService ScrollLockService { get; set; } = null!;
    [Inject] private ResizeEventListenerService<NavMenu> ResizeListener { get; set; } = null!;

    private bool _isSidebarOpen = false;
    private BrandInfo _brand => AppContent.User.Brand;
    private List<NavigationLinkInfo> _navigationLinks => AppContent.Layout.NavigationLinks;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ResizeListener.RegisterResizeCallbackAsync(this);
        }
    }

    [JSInvokable]
    public async Task OnResize(int width)
    {
        if (width >= 992 && _isSidebarOpen)
        {
            _isSidebarOpen = false;
            StateHasChanged();
            await ScrollLockService.ForceUnlockAsync();
        }
    }

    private async Task ToggleSidebar()
    {
        _isSidebarOpen = !_isSidebarOpen;

        if (_isSidebarOpen)
        {
            await ScrollLockService.LockScrollAsync();
        }
        else
        {
            await ScrollLockService.UnlockScrollAsync();
        }
    }

    public async ValueTask DisposeAsync()
    {
        await ResizeListener.DisposeAsync();
    }
}
